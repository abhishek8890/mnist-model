 #**Loading Mnist Dataset**
"""

from keras.datasets import mnist

(train_images,train_labels),(test_images,test_labels)=mnist.load_data()
tl=test_labels

train_images.shape

test_images.shape

test_labels

"""#**Using Multilayer Perceptron**"""

from keras.layers import Input,Dense
from keras.models import Model
from keras import optimizers

input_l=Input(shape=(28*28,))
hidden_l1=Dense(512,activation='relu')(input_l)
output_l=Dense(10,activation='softmax')(hidden_l1)

model1=Model(inputs=[input_l,],outputs=[output_l,])
model1.compile(loss = 'categorical_crossentropy', optimizer = optimizers.SGD(lr=0.1), 
              metrics = ['accuracy',])

model1.summary()

"""## **Reshaping of data according to network requirement**"""

train_images = train_images.reshape((60000, 28 * 28))
train_images = train_images.astype('float32') / 255

test_images = test_images.reshape((10000, 28 * 28))
test_images = test_images.astype('float32') / 255
train_images.shape

"""## **Converting output into One Hot Encoding**"""

from keras.utils import to_categorical

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)
test_labels.shape

"""## **Model Fitting**"""

model1.fit(train_images,train_labels,epochs=5,batch_size=128)

test_loss, test_acc = model1.evaluate(test_images, test_labels)

print(test_acc)

predict1=model1.predict(test_images)

"""## **Confusion Matrix for Multilayer Perceptron**"""

import numpy as np
from sklearn.metrics import confusion_matrix
predict_l1=np.argmax(predict1,axis=1)
predict_l1
confusion_matrix(tl,predict_l1)



"""# **Using Convolutional Neural Network**"""

from keras.layers import Input,Dense,Conv2D,MaxPooling2D,Flatten
from keras.models import Model

input_l2=Input(shape=(28, 28, 1))
conv1=Conv2D(32, (3, 3), activation='relu')(input_l2)
max1=MaxPooling2D((2, 2))(conv1)
conv2=Conv2D(64, (3, 3), activation='relu')(max1)
max2=MaxPooling2D((2, 2))(conv2)
conv3=Conv2D(64, (3, 3), activation='relu')(max2)
flat=Flatten()(conv3)
hl=Dense(64, activation='relu')(flat)
output_l2=Dense(10, activation='softmax')(hl)

model2=Model(inputs=[input_l2,],outputs=[output_l2,])

model2.summary()

"""## **Reshaping the data according to requirement of convolutional network**"""

from keras.utils import to_categorical
train_images = train_images.reshape((60000, 28, 28, 1))
train_images = train_images.astype('float32') / 255

test_images = test_images.reshape((10000, 28, 28, 1))
test_images = test_images.astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

"""## **Model fitting**"""

model2.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
model2.fit(train_images, train_labels, epochs=5, batch_size=64)

test_loss2, test_acc2 = model2.evaluate(test_images, test_labels)

test_acc2

predict2=model2.predict(test_images)

"""## **Confusion Matrix for Convolutional Neural Network**"""

import numpy as np
from sklearn.metrics import confusion_matrix
predict_l2=np.argmax(predict2,axis=1)
confusion_matrix(tl,predict_l2)

